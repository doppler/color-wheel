{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","numberOfRadials","setNumberOfRadials","react_default","a","createElement","className","App_ColorWheel","reverse","href","App_RadialCountSlider","handleRangeChange","event","Number","target","value","ColorWheel","_ref","concat","Array","from","map","_","i","App_Radial","key","rotation","Radial","_ref2","style","transform","backgroundColor","RadialCountSlider","_ref3","id","type","min","max","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAsBeA,SAnBH,WAAM,IAAAC,EAC8BC,mBAAS,IADvCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACQI,EADRJ,EAAA,GAOhB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAe,CAAEN,oBAClBE,EAAAC,EAAAC,cAACE,EAAe,CAAEN,kBAAiBO,SAAS,IAC5CL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcG,KAAK,0CAAhC,eAGAN,EAAAC,EAAAC,cAACK,EAAsB,CAAET,kBAAiBU,kBAXpB,SAAAC,GACxBV,EAAmBW,OAAOD,EAAME,OAAOC,cAiBrCC,EAAa,SAAAC,GAAkC,IAA/BhB,EAA+BgB,EAA/BhB,gBAAiBO,EAAcS,EAAdT,QACrC,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAS,cAAAY,OAAgBV,EAAU,UAAY,OACjDW,MAAMC,KAAKD,MAAMlB,IAAkBoB,IAAI,SAACC,EAAGC,GAAJ,OACtCpB,EAAAC,EAAAC,cAACmB,EAAD,CAAQC,IAAKF,EAAGG,SAAe,IAAJH,EAAWtB,QAMxC0B,EAAS,SAAAC,GAAA,IAAGF,EAAHE,EAAGF,SAAH,OACbvB,EAAAC,EAAAC,cAAA,OACEC,UAAU,SACVuB,MAAO,CACLC,UAAS,UAAAZ,OAAYQ,EAAZ,QACTK,gBAAe,OAAAb,OAASQ,EAAT,oBAKfM,EAAoB,SAAAC,GAAA,IAAGhC,EAAHgC,EAAGhC,gBAAiBU,EAApBsB,EAAoBtB,kBAApB,OACxBR,EAAAC,EAAAC,cAAA,SACE6B,GAAG,oBACHC,KAAK,QACLpB,MAAOd,EACPmC,IAAK,EACLC,IAAK,IACLC,SAAU3B,KCvCM4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb13e2e4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.scss\";\n\nconst App = () => {\n  const [numberOfRadials, setNumberOfRadials] = useState(25);\n\n  const handleRangeChange = event => {\n    setNumberOfRadials(Number(event.target.value));\n  };\n\n  return (\n    <div className=\"App\">\n      <ColorWheel {...{ numberOfRadials }} />\n      <ColorWheel {...{ numberOfRadials, reverse: true }} />\n      <a className=\"github-link\" href=\"https://github.com/doppler/color-wheel\">\n        View Source\n      </a>\n      <RadialCountSlider {...{ numberOfRadials, handleRangeChange }} />\n    </div>\n  );\n};\n\nexport default App;\n\nconst ColorWheel = ({ numberOfRadials, reverse }) => {\n  return (\n    <div className={`ColorWheel ${reverse ? \"reverse\" : null}`}>\n      {Array.from(Array(numberOfRadials)).map((_, i) => (\n        <Radial key={i} rotation={(i * 360) / numberOfRadials} />\n      ))}\n    </div>\n  );\n};\n\nconst Radial = ({ rotation }) => (\n  <div\n    className=\"Radial\"\n    style={{\n      transform: `rotate(${rotation}deg)`,\n      backgroundColor: `hsl(${rotation}, 100%, 50%)`\n    }}\n  />\n);\n\nconst RadialCountSlider = ({ numberOfRadials, handleRangeChange }) => (\n  <input\n    id=\"RadialCountSlider\"\n    type=\"range\"\n    value={numberOfRadials}\n    min={0}\n    max={360}\n    onChange={handleRangeChange}\n  />\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}